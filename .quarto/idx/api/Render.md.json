{"title":"Module Render","markdown":{"headingText":"Module Render","containsRefs":false,"markdown":"\n<a id='Module-Render'></a>\n\n<a id='Module-Render-1'></a>\n\n\n\n\n\n<a id='Rendering-methods'></a>\n\n<a id='Rendering-methods-1'></a>\n\n## Rendering methods\n\n<a id='VPL.Render.render' href='#VPL.Render.render'>#</a>\n**`VPL.Render.render`** &mdash; *Function*.\n\n\n\n```julia\nrender(m::Mesh; kwargs...)\n```\n\nRender a mesh. This will create a new visualization (see Documentation for  details). Keyword arguments are passed to the `render(scene::Geom.Scene)` method  and any unmatched keywords will be passed along to `Makie.mesh()`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Render/Render.jl#LL6-L12' class='documenter-source'>source</a><br>\n\n\n```\nrender(scene::Geom.Scene; normals::Bool = false, wireframe::Bool = false, kwargs...)\n```\n\nRender a `Geom.Scene` object. This will create a new visualization (see  Documentation for details). `normals = true` will draw arrows in the direction  of the normal vector for each triangle in the mesh, `wireframe = true` will draw  the edges of each triangle with black lines. Keyword arguments are passed to  `Makie.mesh()`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Render/Render.jl#LL63-L71' class='documenter-source'>source</a><br>\n\n\n```\nrender(graph::Graph, Float64; normals::Bool = false, message = nothing,\n       wireframe::Bool = false, kwargs...)\n```\n\nRender the 3D mesh associated to a `Graph` object. This will create a new  visualization (see Documentation for details). `normals = true` will draw arrows  in the direction of the normal vector for each triangle in the mesh,  `wireframe = true` will draw the edges of each triangle with black lines.  Keyword arguments are passed to `Makie.mesh()`. The argument `message` is any user-defined object that will be stored in the turtles and hence available  within the `feedgeom!` and `feedcolor!` methods. By default, double  floating precision will be used (`Float64`) but it is possible to generate a  version with a different precision by specifying the corresponding type as in  `render(graph, Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Render/Render.jl#LL77-L91' class='documenter-source'>source</a><br>\n\n\n```\nrender(graphs::Vector{<:Graph}, Float64; normals::Bool = false, \n       wireframe::Bool = false, messsage = nothing, kwargs...)\n```\n\nRender the 3D mesh associated to an array of `Graph` objects. This will create a  new visualization (see Documentation for details). `normals = true` will draw  arrows in the direction of the normal vector for each triangle in the mesh,  `wireframe = true` will draw the edges of each triangle with black lines.  Keyword arguments are passed to `Makie.mesh()`. The argument `message` is any user-defined object that will be stored in the turtles and hence available  within the `feedgeom!` and `feedcolor!` methods. By default, double  floating precision will be used (`Float64`) but it is possible to generate a  version with a different precision by specifying the corresponding type as in  `render(graphs, Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Render/Render.jl#LL98-L112' class='documenter-source'>source</a><br>\n\n<a id='VPL.Render.render!' href='#VPL.Render.render!'>#</a>\n**`VPL.Render.render!`** &mdash; *Function*.\n\n\n\n```julia\nrender!(m::Mesh; kwargs...)\n```\n\nAdd a mesh to the visualization currently active. This will create a new  visualization (see Documentation for details). Keyword arguments are passed to  the `render!(scene::Geom.Scene)` method and any unmatched keywords will be passed  along to `Makie.mesh!()`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Render/Render.jl#LL17-L24' class='documenter-source'>source</a><br>\n\n\n```\nrender!(source::Source{G, A, nw}; n = 20, alpha = 0.2, point = false,\n        scale = 0.2)\n```\n\nAdd a mesh representing the light source to a 3D scene (if `point = false`) or a series of points representing the center of the light sources (if  `point = true`). When `point = false`, for each type of light source a  triangular mesh will be created, where `n` is the number of triangles (see  documentation of geometric primitives for details) and `alpha` is the  transparency to be used for each triangle. When `point = true`, only the center of the light source is rendered along with the normal vector at that point  (representative of the direction at which rays are generated). In the current version, `point = true` is only possible for directional light sources.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Raytracer/Render.jl#LL4-L17' class='documenter-source'>source</a><br>\n\n\n```\nrender!(grid::GridCloner; alpha = 0.2)\n```\n\nAdd a mesh representing the bounding boxes of the grid cloner to a 3D scene,  where `alpha` represents the transparency of each box.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Raytracer/Render.jl#LL55-L60' class='documenter-source'>source</a><br>\n\n<a id='VPL.Render.export_scene-Tuple{}' href='#VPL.Render.export_scene-Tuple{}'>#</a>\n**`VPL.Render.export_scene`** &mdash; *Method*.\n\n\n\n```julia\nexport_scene(;scene, filename, kwargs...)\n```\n\nExport a screenshot of the current visualization (stored as `scene` as output of a call to `render`) as a PNG file store in the path given by `filename`  (including `.png` extension). Keyword arguments will be passed along to the  corresponding `save` method from Makie (see VPL documentation for details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/7a132c2a4dc8604d7234cee76a1586daf23ba23e/src/Render/Render.jl#LL124-L131' class='documenter-source'>source</a><br>\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"Render.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","theme":{"light":"default","dark":"darkly"}},"extensions":{"book":{"multiFile":true}}}}}