{"title":"Module Geometry","markdown":{"headingText":"Module Geometry","containsRefs":false,"markdown":"\n<a id='Module-Geometry'></a>\n\n<a id='Module-Geometry-1'></a>\n\n\n\n\n\n<a id='Turtle-geometry'></a>\n\n<a id='Turtle-geometry-1'></a>\n\n## Turtle geometry\n\n<a id='VPL.Geom.MTurtle-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T' href='#VPL.Geom.MTurtle-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T'>#</a>\n**`VPL.Geom.MTurtle`** &mdash; *Method*.\n\n\n\n```julia\nMTurtle()\n```\n\nCreate a meshing turtle that can convert a `Graph` into a 3D mesh using  turtle operators, geometry primitives and methods of `feedgeom!()`. By default,  the meshing turtle will generate geometry primitives with single floating  precision (`Float32`) but it is possible to generate a version with higher  precision as in `MTurtle(Float64)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL25-L33' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ntriangles-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.ntriangles-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.ntriangles`** &mdash; *Method*.\n\n\n\n```julia\nntriangles(turtle)\n```\n\nExtract the number of triangles in the mesh associated to each geometry  primitive that were fed to the turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL101-L106' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.head-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.head-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.head`** &mdash; *Method*.\n\n\n\n```julia\nhead(turtle)\n```\n\nExtract the direction vector (a `Vec` object) of the head of the turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL46-L50' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.up-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.up-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.up`** &mdash; *Method*.\n\n\n\n```julia\nup(turtle)\n```\n\nExtract the direction vector (a `Vec` object) of the back of the turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL55-L59' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.arm-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.arm-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.arm`** &mdash; *Method*.\n\n\n\n```julia\narm(turtle)\n```\n\nExtract the direction vector (a `Vec` object) of the arm of the turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL64-L68' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.pos-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.pos-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.pos`** &mdash; *Method*.\n\n\n\n```julia\npos(turtle)\n```\n\nExtract the current position of the turtle (a `Vec` object).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL73-L77' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.geoms-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.geoms-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.geoms`** &mdash; *Method*.\n\n\n\n```julia\ngeoms(turtle)\n```\n\nExtract the 3D mesh generated by the turtle (a `Mesh` object).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL82-L86' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.nvertices-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.nvertices-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.nvertices`** &mdash; *Method*.\n\n\n\n```julia\nnvertices(turtle)\n```\n\nExtract the number of vertices in the mesh associated to each geometry  primitive that were fed to the turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Turtle.jl#LL91-L96' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.feedgeom!' href='#VPL.Geom.feedgeom!'>#</a>\n**`VPL.Geom.feedgeom!`** &mdash; *Function*.\n\n\n\n```julia\nfeedgeom!(turtle::MTurtle, m::Mesh)\n```\n\nGeneral purpose method to feed a mesh to a turtle. Note that all primitives  provided by VPL are implemented as meshes, but this is a generic method for  meshes that are constructed directly by the user or imported from external software.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Graphs.jl#LL3-L10' class='documenter-source'>source</a><br>\n\n\n```\nfeedgeom!(turtle::MTurtle, node::Node)\n```\n\nDefault method for `feedgeom!()` that does not do anything. This allows the user to include nodes in a graph without an associated geometry.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Graphs.jl#LL17-L22' class='documenter-source'>source</a><br>\n\n\n```\nfeedgeom!(turtle::MTurtle, g::Graph)\n```\n\nProcess a `Graph` object with a turtle and generate the corresponding 3D mesh  from executing the different `feedgeom!()` methods associated to the nodes in  the graph.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Graphs.jl#LL31-L37' class='documenter-source'>source</a><br>\n\n\n```\nfeedgeom!(turtle::MTurtle, collection::AbstractArray)\nfeedgeom!(turtle::MTurtle, collection::Tuple)\n```\n\nFeed a turtle an array or tuple of objects (`collection`) with existing  `feedgeom!()` methods.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Graphs.jl#LL70-L76' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.T' href='#VPL.Geom.T'>#</a>\n**`VPL.Geom.T`** &mdash; *Type*.\n\n\n\n```julia\nT(to::Vec)\n```\n\nNode that translates a turtle to the new position `to` (a `Vec` object).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL17-L21' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.t!-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.t!-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.t!`** &mdash; *Method*.\n\n\n\n```julia\nt!(turtle; to = O())\n```\n\nTranslate a turtle to the new position `to` (a `Vec` object). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL7-L11' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.OR' href='#VPL.Geom.OR'>#</a>\n**`VPL.Geom.OR`** &mdash; *Type*.\n\n\n\n```julia\nOR(head::Vec, up::Vec, arm::Vec)\n```\n\nNode that orients a turtle to a new direction by re-defining the local reference  system.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL39-L44' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.or!-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.or!-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.or!`** &mdash; *Method*.\n\n\n\n```julia\nor!(turtle; head = Z(), up = X(), arm = Y())\n```\n\nOrient a turtle to a new direction by re-defining the local reference system. The arguments `head`, `up` and `arm` should be of type `Vec`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL28-L33' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SET' href='#VPL.Geom.SET'>#</a>\n**`VPL.Geom.SET`** &mdash; *Type*.\n\n\n\n```julia\nSET(to, head, up, arm)\n```\n\nNode that sets the position and orientation of a turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL64-L68' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.set!-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.set!-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.set!`** &mdash; *Method*.\n\n\n\n```julia\nset!(turtle; to = O(), head = Z(), up = X(), arm = Y())\n```\n\nSet position and orientation of a turtle. The arguments `to`, `head`, `up` and  `arm` should be of type `Vec` and be passed as keyword arguments.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL53-L58' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.RU' href='#VPL.Geom.RU'>#</a>\n**`VPL.Geom.RU`** &mdash; *Type*.\n\n\n\n```julia\nRU(angle)\n```\n\nNode that rotates a turtle around up axis. Angle must be in hexadecimal degrees  and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL94-L99' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ru!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT' href='#VPL.Geom.ru!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT'>#</a>\n**`VPL.Geom.ru!`** &mdash; *Method*.\n\n\n\n```julia\nru!(turtle, angle)\n```\n\nRotates a turtle around up axis. Angle must be in hexadecimal degrees and the  rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL79-L84' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.RA' href='#VPL.Geom.RA'>#</a>\n**`VPL.Geom.RA`** &mdash; *Type*.\n\n\n\n```julia\nRA(angle)\n```\n\nNode that rotates a turtle around arm axis. Angle must be in hexadecimal degrees  and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL121-L126' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ra!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT' href='#VPL.Geom.ra!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT'>#</a>\n**`VPL.Geom.ra!`** &mdash; *Method*.\n\n\n\n```julia\nra!(turtle, angle)\n```\n\nRotates a turtle around arm axis. Angle must be in hexadecimal degrees and the  rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL106-L111' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.RH' href='#VPL.Geom.RH'>#</a>\n**`VPL.Geom.RH`** &mdash; *Type*.\n\n\n\n```julia\nRH(angle)\n```\n\nNode that rotates a turtle around head axis. Angle must be in hexadecimal  degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL148-L153' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.rh!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT' href='#VPL.Geom.rh!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT'>#</a>\n**`VPL.Geom.rh!`** &mdash; *Method*.\n\n\n\n```julia\nrh!(turtle, angle)\n```\n\nRotate turtle around head axis. Angle must be in hexadecimal degrees and the  rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL133-L138' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.F' href='#VPL.Geom.F'>#</a>\n**`VPL.Geom.F`** &mdash; *Type*.\n\n\n\n```julia\nF(dist)\n```\n\nMoves a turtle forward a given distance.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL170-L174' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.f!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT' href='#VPL.Geom.f!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}, FT}} where FT'>#</a>\n**`VPL.Geom.f!`** &mdash; *Method*.\n\n\n\n```julia\nf!(turtle, dist)\n```\n\nMove turtle forward a given distance.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Movements.jl#LL160-L164' class='documenter-source'>source</a><br>\n\n\n<a id='D-vectors'></a>\n\n<a id='D-vectors-1'></a>\n\n## 3D vectors\n\n<a id='VPL.Geom.Vec' href='#VPL.Geom.Vec'>#</a>\n**`VPL.Geom.Vec`** &mdash; *Type*.\n\n\n\n```julia\nVec(x, y, z)\n```\n\n3D vector or point with coordinates x, y and z.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL14-L18' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.O-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.O-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.O`** &mdash; *Method*.\n\n\n\n```julia\nO()\n```\n\nReturns the origin of the 3D coordinate system as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `O(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL23-L28' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.X-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.X-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.X`** &mdash; *Method*.\n\n\n\n```julia\nX()\n```\n\nReturns an unit vector in the direction of the X axis as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `X(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL73-L78' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Y-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.Y-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Y`** &mdash; *Method*.\n\n\n\n```julia\nY()\n```\n\nReturns an unit vector in the direction of the Y axis as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `Y(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL53-L58' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Z-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.Z-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Z`** &mdash; *Method*.\n\n\n\n```julia\nZ()\n```\n\nReturns an unit vector in the direction of the Z axis as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `Z(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL33-L38' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.X-Tuple{FT} where FT' href='#VPL.Geom.X-Tuple{FT} where FT'>#</a>\n**`VPL.Geom.X`** &mdash; *Method*.\n\n\n\n```julia\nX(s)\n```\n\nReturns scaled vector in the direction of the X axis with length `s` as a `Vec` object using the same floating point precision as `s`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL83-L88' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Y-Tuple{FT} where FT' href='#VPL.Geom.Y-Tuple{FT} where FT'>#</a>\n**`VPL.Geom.Y`** &mdash; *Method*.\n\n\n\n```julia\nY(s)\n```\n\nReturns scaled vector in the direction of the Y axis with length `s` as a `Vec` object using the same floating point precision as `s`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL63-L68' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Z-Tuple{FT} where FT' href='#VPL.Geom.Z-Tuple{FT} where FT'>#</a>\n**`VPL.Geom.Z`** &mdash; *Method*.\n\n\n\n```julia\nZ(s)\n```\n\nReturns scaled vector in the direction of the Z axis with length `s` as a `Vec` object using the same floating point precision as `s`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Module_Geom.jl#LL43-L48' class='documenter-source'>source</a><br>\n\n\n<a id='Geometry-primitives'></a>\n\n<a id='Geometry-primitives-1'></a>\n\n## Geometry primitives\n\n\n<a id='Rectangle'></a>\n\n<a id='Rectangle-1'></a>\n\n### Rectangle\n\n<a id='VPL.Geom.Rectangle-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.Rectangle-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Rectangle`** &mdash; *Method*.\n\n\n\n```julia\nRectangle(;length = 1.0, width = 1.0)\n```\n\nCreate a rectangle with dimensions given by `length` and width, standard location  and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/Rectangle.jl#LL51-L56' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Rectangle-Union{Tuple{StaticArraysCore.SVector{3, FT}}, Tuple{FT}} where FT' href='#VPL.Geom.Rectangle-Union{Tuple{StaticArraysCore.SVector{3, FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Rectangle`** &mdash; *Method*.\n\n\n\n```julia\nRectangle(;v = O(), length = 1.0, width = 1.0)\n```\n\nCreate a rectangle from a vertex (`v`) and vectors `length` and `width`  representing the side of the primitive. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/Rectangle.jl#LL73-L78' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Rectangle!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.Rectangle!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Rectangle!`** &mdash; *Method*.\n\n\n\n```julia\nRectangle!(turtle; length = 1.0, width = 1.0, move = false)\n```\n\nGenerate a rectangle in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the rectangle to.\n  * `length`: Length of the rectangle.\n  * `width`: Width of the rectangle.\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA triangle mesh will be generated representing the rectangle. The rectangle will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument `length` refers to the axis of the rectangle aligned with the head axis of the turtle, whereas `width` refers to the orthogonal axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `length`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL41-L63' class='documenter-source'>source</a><br>\n\n\n<a id='Trapezoid'></a>\n\n<a id='Trapezoid-1'></a>\n\n### Trapezoid\n\n<a id='VPL.Geom.Trapezoid-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.Trapezoid-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Trapezoid`** &mdash; *Method*.\n\n\n\n```julia\nTrapezoid(;length = 1.0, width = 1.0, ratio = 1.0)\n```\n\nCreate a trapezoid with dimensions given by `length` and the larger `width` and the `ratio` between the smaller and larger widths. The trapezoid is generted at  the standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/Trapezoid.jl#LL50-L56' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Trapezoid!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.Trapezoid!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Trapezoid!`** &mdash; *Method*.\n\n\n\n```julia\nTrapezoid!(turtle; length = 1.0, width = 1.0, ratio = 1.0, move = false)\n```\n\nGenerate a trapezoid in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the trapezoid to.\n  * `length`: Length of the trapezoid.\n  * `width`: Width of the base of the trapezoid.\n  * `ratio`: Ratio between the width of the top and base of the trapezoid.\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA triangle mesh will be generated representing the trapezoid. The trapezoid will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument `length` refers to the axis of the trapezoid aligned with the head axis of the turtle, whereas `width` refers to the orthogonal axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `length`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL75-L98' class='documenter-source'>source</a><br>\n\n\n<a id='Ellipse'></a>\n\n<a id='Ellipse-1'></a>\n\n### Ellipse\n\n<a id='VPL.Geom.Ellipse-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.Ellipse-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Ellipse`** &mdash; *Method*.\n\n\n\n```julia\nEllipse(;length = 1.0, width = 1.0, n = 20)\n```\n\nCreate an  ellipse with dimensions given by `length` and `width`, discretized  into `n` triangles (must be even) and standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/Ellipse.jl#LL62-L67' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Ellipse!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.Ellipse!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Ellipse!`** &mdash; *Method*.\n\n\n\n```julia\nEllipse!(turtle; length = 1.0, width = 1.0, n = 20, move = false)\n```\n\nGenerate an ellipse in front of a turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the ellipse to.\n  * `length`: Length of the ellipse.\n  * `width`: Width of the ellipse.\n  * `n`: Number of triangles of the mesh approximating the ellipse (an integer).\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA triangle mesh will be generated with `n` triangles that approximates an ellipse. The ellipse will be generated in front of the turtle, on the plane defined by the arm and head axes of the turtle. The argument `length` refers to the axis of the ellipse aligned with the head axis of the turtle, whereas `width` refers to the orthogonal axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `length`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL7-L30' class='documenter-source'>source</a><br>\n\n\n<a id='Hollow-cylinder'></a>\n\n<a id='Hollow-cylinder-1'></a>\n\n### Hollow cylinder\n\n<a id='VPL.Geom.HollowCylinder-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCylinder-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCylinder`** &mdash; *Method*.\n\n\n\n```julia\nHollowCylinder(;length = 1.0, width = 1.0, height = 1.0, n = 40)\n```\n\nCreate a hollow cylinder with dimensions given by `length`, `width` and `height`,  discretized into `n` triangles (must be even) and standard location and orientation.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/HollowCylinder.jl#LL113-L118' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCylinder!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCylinder!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCylinder!`** &mdash; *Method*.\n\n\n\n```julia\nHollowCylinder!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 40, move = false)\n```\n\nGenerate a hollow cylinder in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the hollow cylinder to.\n  * `length`: Length of the ellipse at the base of the hollow cylinder.\n  * `width`: Width of the ellipse at the base of the hollow cylinder.\n  * `height`: Height of the hollow cylinder.\n  * `n`: Number of triangles in the mesh (must be even).\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated with n triangles that approximate the hollow cylinder. The cylinder will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis and  `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL180-L204' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCylinder-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCylinder-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCylinder`** &mdash; *Method*.\n\n\n\n```julia\nSolidCylinder(;length = 1.0, width = 1.0, height = 1.0, n = 80)\n```\n\nCreate a solid cylinder with dimensions given by `length`, `width` and `height`,  discretized into `n` triangles (must be even) and standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/SolidCylinder.jl#LL108-L113' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCylinder!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCylinder!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCylinder!`** &mdash; *Method*.\n\n\n\n```julia\nSolidCylinder!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 80, move = false)\n```\n\nGenerate a solid cylinder in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the solid cylinder to.\n  * `length`: Length of the ellipse at the base of the solid cylinder.\n  * `width`: Width of the ellipse at the base of the solid cylinder.\n  * `height`: Height of the solid cylinder.\n  * `n`: Number of triangles in the mesh (must be even).\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated with n triangles that approximate the solid cylinder. The cylinder will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis and  `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL328-L352' class='documenter-source'>source</a><br>\n\n\n<a id='Hollow-cone'></a>\n\n<a id='Hollow-cone-1'></a>\n\n### Hollow cone\n\n<a id='VPL.Geom.HollowCone-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCone-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCone`** &mdash; *Method*.\n\n\n\n```julia\nHollowCone(;length = 1.0, width = 1.0, height = 1.0, n = 20)\n```\n\nCreate a hollow cone with dimensions given by `length`, `width` and `height`,  discretized into `n` triangles (must be even) and standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/HollowCone.jl#LL80-L85' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCone!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCone!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCone!`** &mdash; *Method*.\n\n\n\n```julia\nHollowCone!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 20, move = false)\n```\n\nGenerate a hollow cone in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the hollow cone to.\n  * `length`: Length of the ellipse at the base of the hollow cone.\n  * `width`: Width of the ellipse at the base of the hollow cone.\n  * `height`: Height of the hollow cone.\n  * `n`: Number of triangles in the mesh.\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated with n triangles that approximate the hollow cone. The cone will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis and  `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL109-L133' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCone-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCone-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCone`** &mdash; *Method*.\n\n\n\n```julia\nSolidCone(;length = 1.0, width = 1.0, height = 1.0, n = 40)\n```\n\nCreate a solid cone with dimensions given by `length`, `width` and `height`,  discretized into `n` triangles (must be even) and standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/SolidCone.jl#LL71-L76' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCone!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCone!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCone!`** &mdash; *Method*.\n\n\n\n```julia\nSolidCone!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 40, move = false)\n```\n\nGenerate a solid frustum in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the solid cone to.\n  * `length`: Length of the ellipse at the base of the solid cone.\n  * `width`: Width of the ellipse at the base of the solid cone.\n  * `height`: Height of the solid cone.\n  * `n`: Number of triangles in the mesh (must be even).\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated with n triangles that approximate the solid cone. The cone will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis and  `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL256-L280' class='documenter-source'>source</a><br>\n\n\n<a id='Cube'></a>\n\n<a id='Cube-1'></a>\n\n### Cube\n\n<a id='VPL.Geom.SolidCube-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCube-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCube`** &mdash; *Method*.\n\n\n\n```julia\nSolidCube(;length = 1.0, width = 1.0, height = 1.0)\n```\n\nCreate a solid cube with dimensions given by `length`, `width` and `height`,  standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/SolidCube.jl#LL64-L69' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCube!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCube!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCube!`** &mdash; *Method*.\n\n\n\n```julia\nSolidCube!(turtle; length = 1.0, width = 1.0, height = 1.0, move = false)\n```\n\nGenerate a solid cube in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the solid cube to.\n  * `length`: Length of the rectangle at the base of the solid cube.\n  * `width`: Width of the rectangle at the base of the solid cube.\n  * `height`: Height of the solid cube.\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated of a solid cube. The cube will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis  and `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL293-L316' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCube-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCube-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCube`** &mdash; *Method*.\n\n\n\n```julia\nHollowCube(;length = 1.0, width = 1.0, height = 1.0)\n```\n\nCreate a hollow cube with dimensions given by `length`, `width` and `height,   standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/HollowCube.jl#LL59-L64' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCube!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCube!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCube!`** &mdash; *Method*.\n\n\n\n```julia\nHollowCube!(turtle; length = 1.0, width = 1.0, height = 1.0, move = false)\n```\n\nGenerate a hollow cube in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the hollow cube to.\n  * `length`: Length of the rectangle at the base of the hollow cube.\n  * `width`: Width of the rectangle at the base of the hollow cube.\n  * `height`: Height of the hollow cube.\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated of a hollow cube. The cube will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis  and `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL145-L168' class='documenter-source'>source</a><br>\n\n\n<a id='Solid-frustum'></a>\n\n<a id='Solid-frustum-1'></a>\n\n### Solid frustum\n\n<a id='VPL.Geom.SolidFrustum-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidFrustum-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidFrustum`** &mdash; *Method*.\n\n\n\n```julia\nSolidFrustum(;length = 1.0, width = 1.0, height = 1.0, n = 40)\n```\n\nCreate a solid frustum with dimensions given by `length`, `width` and `height`,  discretized into `n` triangles and standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/SolidFrustum.jl#LL112-L117' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidFrustum!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.SolidFrustum!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidFrustum!`** &mdash; *Method*.\n\n\n\n```julia\nSolidFrustum!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 80, move = false)\n```\n\nGenerate a solid frustum in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the solid frustum to.\n  * `length`: Length of the ellipse at the base of the solid frustum.\n  * `width`: Width of the ellipse at the base of the solid frustum.\n  * `height`: Height of the solid frustum.\n  * `n`: Number of triangles in the mesh (must be even).\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated with n triangles that approximate the solid frustum. The frustum will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis and  `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL365-L389' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowFrustum-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.HollowFrustum-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowFrustum`** &mdash; *Method*.\n\n\n\n```julia\nHollowFrustum(;length = 1.0, width = 1.0, height = 1.0, n = 40)\n```\n\nCreate a hollow frustum with dimensions given by `length`, `width` and `height`,  discretized into `n` triangles (must be even) and standard location and orientation. \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/HollowFrustum.jl#LL109-L114' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowFrustum!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT' href='#VPL.Geom.HollowFrustum!-Union{Tuple{VPL.Geom.MTurtle{FT}}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowFrustum!`** &mdash; *Method*.\n\n\n\n```julia\nHollowFrustum!(turtle; length = 1.0, width = 1.0, height = 1.0, n = 40, move = false)\n```\n\nGenerate a hollow frustum in front of the turtle and feed it to a turtle.\n\n**Arguments**\n\n  * `turtle`: The turtle that we feed the hollow frustum to.\n  * `length`: Length of the ellipse at the base of the hollow frustum.\n  * `width`: Width of the ellipse at the base of the hollow frustum.\n  * `height`: Height of the hollow frustum.\n  * `n`: Number of triangles in the mesh (must be even).\n  * `move`: Whether to move the turtle forward or not (`true` or `false`).\n\n**Details**\n\nA mesh will be generated with n triangles that approximate the hollow frustum. The frustum will be generated in front of the turtle, with the base on the plane defined by the arm and up axes of the turtle, centered at the head axis. The `length` argument refers to the up axis, whereas `width` refers to the arm axis and  `height` is associated to the head axis.\n\nWhen `move = true`, the turtle will be moved forward by a distance equal to `height`.\n\n**Return**\n\nReturns `nothing` but modifies the `turtle` as a side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Turtle/Primitives.jl#LL217-L241' class='documenter-source'>source</a><br>\n\n\n<a id='Bounding-box'></a>\n\n<a id='Bounding-box-1'></a>\n\n### Bounding box\n\n<a id='VPL.Geom.BBox-Union{Tuple{VPL.Geom.Mesh{VT}}, Tuple{VT}, Tuple{FT}} where {FT, VT<:StaticArraysCore.SVector{3, FT}}' href='#VPL.Geom.BBox-Union{Tuple{VPL.Geom.Mesh{VT}}, Tuple{VT}, Tuple{FT}} where {FT, VT<:StaticArraysCore.SVector{3, FT}}'>#</a>\n**`VPL.Geom.BBox`** &mdash; *Method*.\n\n\n\n```julia\nBBox(m::Mesh)\n```\n\nBuild a tight axis-aligned bounding box around a `Mesh` object.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/BBox.jl#LL3-L7' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.BBox-Union{Tuple{FT}, Tuple{StaticArraysCore.SVector{3, FT}, StaticArraysCore.SVector{3, FT}}} where FT' href='#VPL.Geom.BBox-Union{Tuple{FT}, Tuple{StaticArraysCore.SVector{3, FT}, StaticArraysCore.SVector{3, FT}}} where FT'>#</a>\n**`VPL.Geom.BBox`** &mdash; *Method*.\n\n\n\n```julia\nBBox(pmin::Vec, pmax::Vec)\n```\n\nBuild an axis-aligned bounding box given the vector of minimum (`pmin`) and  maximum (`pmax`) coordinates.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Primitives/BBox.jl#LL27-L32' class='documenter-source'>source</a><br>\n\n\n<a id='Mesh-related-methods'></a>\n\n<a id='Mesh-related-methods-1'></a>\n\n## Mesh-related methods\n\n<a id='VPL.Geom.Mesh-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT<:AbstractFloat' href='#VPL.Geom.Mesh-Union{Tuple{}, Tuple{Type{FT}}, Tuple{FT}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Mesh`** &mdash; *Method*.\n\n\n\n```julia\nMesh()\n```\n\nGenerate an empty triangular dense mesh that represents a primitive or 3D scene.  By default a `Mesh` object will only accept coordinates in double floating  precision (`Float64`) but a lower precision can be generated by specifying the  corresponding data type as in `Mesh(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/Mesh.jl#LL10-L17' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Mesh-Union{Tuple{Any}, Tuple{FT}, Tuple{Any, Any}, Tuple{Any, Any, Type{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.Mesh-Union{Tuple{Any}, Tuple{FT}, Tuple{Any, Any}, Tuple{Any, Any, Type{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Mesh`** &mdash; *Method*.\n\n\n\n```julia\nMesh(nt, nv = nt*3)\n```\n\nGenerate a triangular dense mesh with enough memory allocated to store `nt`  triangles and `nv` vertices. The behaviour is equivalent to generating an empty  mesh but may be computationally more efficient when appending a large number of  primitives. If a lower floating precision is required, this may be specified as an optional third argument as in `Mesh(10, 30, Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/Mesh.jl#LL22-L30' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ntriangles-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.ntriangles-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.ntriangles`** &mdash; *Method*.\n\n\n\n```julia\nntriangles(mesh)\n```\n\nExtract the number of triangles in a mesh.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/Mesh.jl#LL38-L42' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.nvertices-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.nvertices-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.nvertices`** &mdash; *Method*.\n\n\n\n```julia\nnvertices(mesh)\n```\n\nThe number of vertices in a mesh.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/Mesh.jl#LL45-L49' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.area-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.area-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.area`** &mdash; *Method*.\n\n\n\n```julia\narea(m::Mesh)\n```\n\nTotal surface area of a mesh (as the sum of areas of individual triangles).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/Mesh.jl#LL97-L101' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.areas-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.areas-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.areas`** &mdash; *Method*.\n\n\n\n```julia\nareas(m::Mesh)\n```\n\nA vector with the areas of the different triangles that form a mesh.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/Mesh.jl#LL106-L110' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.loadmesh-Tuple{Any}' href='#VPL.Geom.loadmesh-Tuple{Any}'>#</a>\n**`VPL.Geom.loadmesh`** &mdash; *Method*.\n\n\n\n```julia\nloadmesh(filename)\n```\n\nImport a mesh from a file given by `filename`. Supported formats include stl, ply, obj and msh. By default, this will generate a `Mesh` object that uses double floating-point precision. However, a lower precision can be specified by passing the relevant data type as in `loadmesh(filename, Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/MeshIO.jl#LL25-L32' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.savemesh-Tuple{Any}' href='#VPL.Geom.savemesh-Tuple{Any}'>#</a>\n**`VPL.Geom.savemesh`** &mdash; *Method*.\n\n\n\n```julia\nsavemesh(mesh; fileformat = STL_BINARY, filename)\n```\n\nSave a mesh into an external file using a variety of formats.\n\n**Arguments**\n\n  * `mesh`: Object of type `Mesh`.\n  * `fileformat`: Format to store the mesh. This is a keyword argument.\n  * `filename`: Name of the file in which to store the mesh.\n\n**Details**\n\nThe `fileformat` should take one of the following arguments: `STL_BINARY`, `STL_ASCII`, `PLY_BINARY`, `PLY_ASCII` or `OBJ`. Note that these names should not be quoted as strings.\n\n**Return**\n\nThis function does not return anything, it is executed for its side effect.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/a452b68af00b4178881adbb8309f8edb8dfbccbd/src/Geom/Mesh/MeshIO.jl#LL43-L60' class='documenter-source'>source</a><br>\n\n\n```\n\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"Geometry.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.242","theme":{"light":"default","dark":"darkly"}},"extensions":{"book":{"multiFile":true}}}}}