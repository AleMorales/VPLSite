{"title":"Module Geometry","markdown":{"headingText":"Module Geometry","containsRefs":false,"markdown":"\n<a id='Module-Geometry'></a>\n\n<a id='Module-Geometry-1'></a>\n\n\n\n\n\n<a id='Turtle-geometry'></a>\n\n<a id='Turtle-geometry-1'></a>\n\n## Turtle geometry\n\n<a id='VPL.Geom.MTurtle-Union{Tuple{}, Tuple{T}, Tuple{Type{T}}} where T' href='#VPL.Geom.MTurtle-Union{Tuple{}, Tuple{T}, Tuple{Type{T}}} where T'>#</a>\n**`VPL.Geom.MTurtle`** &mdash; *Method*.\n\n\n\n```julia\nMTurtle()\n```\n\nCreate a meshing turtle that can convert a `Graph` into a 3D mesh using turtle operators, geometry primitives and methods of `feedgeom!()`. By default, the meshing turtle will generate geometry primitives with single floating precision (`Float32`) but it is possible to generate a version with higher precision as in `MTurtle(Float64)`. The turtle generated by this function will be centered at the origin and oriented with the head towards the Z axis (see VPL documentation for details on turtles).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL23-L32' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.head-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.head-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.head`** &mdash; *Method*.\n\n\n\n```julia\nhead(turtle)\n```\n\nExtract the direction vector (a `Vec` object) of the *head* of the turtle (see VPL documentation for details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL45-L49' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.up-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.up-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.up`** &mdash; *Method*.\n\n\n\n```julia\nup(turtle)\n```\n\nExtract the direction vector (a `Vec` object) of the back of the turtle (see VPL documentation for details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL54-L58' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.arm-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.arm-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.arm`** &mdash; *Method*.\n\n\n\n```julia\narm(turtle)\n```\n\nExtract the direction vector (a `Vec` object) of the *arm* of the turtle (see VPL documentation for details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL63-L67' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.pos-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.pos-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.pos`** &mdash; *Method*.\n\n\n\n```julia\npos(turtle)\n```\n\nExtract the current position of the turtle (a `Vec` object, see VPL documentation for details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL72-L76' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.geoms-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.geoms-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.geoms`** &mdash; *Method*.\n\n\n\n```julia\ngeoms(turtle)\n```\n\nExtract the 3D mesh generated by the turtle (a `Mesh` object, see VPL documentation for details). This mesh does not distinguish among geometric primitives (i.e., as the turtle parses the graph,  the triangular mesh associated to each primitive is appended to the growing mesh).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL81-L87' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.nvertices-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.nvertices-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.nvertices`** &mdash; *Method*.\n\n\n\n```julia\nnvertices(turtle)\n```\n\nExtract the number of vertices in the mesh associated to each geometry primitive. This links each  subset of the mesh stored in the turtle to the original geometry primitives.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Turtle.jl#LL92-L97' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.feedgeom!' href='#VPL.Geom.feedgeom!'>#</a>\n**`VPL.Geom.feedgeom!`** &mdash; *Function*.\n\n\n\n```julia\nfeedgeom!(turtle::MTurtle, m::Mesh)\n```\n\nGeneral purpose method to feed a mesh to a turtle. This should be used to add any generated primitive to the turtle's mesh as they are all implemented as meshes\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Graphs.jl#LL3-L8' class='documenter-source'>source</a><br>\n\n\n```\nfeedgeom!(turtle::MTurtle, node::Node)\n```\n\nDefault method for `feedgeom!()` that does not do anything. Hence, the user can include nodes in a graph withour an associated geometry.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Graphs.jl#LL11-L16' class='documenter-source'>source</a><br>\n\n\n```\nfeedgeom!(turtle::MTurtle, g::Graph)\n```\n\nProcess a `Graph` object with a turtle and generate the corresponding 3D mesh from the turtle movement operations and geometry primitives or meshes defined in the graph.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Graphs.jl#LL22-L27' class='documenter-source'>source</a><br>\n\n\n```\nfeedgeom!(turtle::MTurtle, collection::AbstractArray)\nfeedgeom!(turtle::MTurtle, collection::Tuple)\n```\n\nFeed a turtle an array or tuple of objects (`collection`) with existing `feedgeom!()` methods.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Graphs.jl#LL60-L65' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.T' href='#VPL.Geom.T'>#</a>\n**`VPL.Geom.T`** &mdash; *Type*.\n\n\n\n```julia\nT(to)\n```\n\nNode that translates a turtle to the new position `to`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL14-L18' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.t!-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.t!-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.t!`** &mdash; *Method*.\n\n\n\n```julia\nt!(turtle; to)\n```\n\nTranslate a turtle to the new position `to`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL5-L9' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.OR' href='#VPL.Geom.OR'>#</a>\n**`VPL.Geom.OR`** &mdash; *Type*.\n\n\n\n```julia\nOR(head, up, arm)\n```\n\nNode that orients a turtle to a new direction by re-defining the local reference system.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL34-L38' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.or!-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.or!-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.or!`** &mdash; *Method*.\n\n\n\n```julia\nor!(turtle, head, up, arm)\n```\n\nOrient a turtle to a new direction by re-defining the local reference system.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL25-L29' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SET' href='#VPL.Geom.SET'>#</a>\n**`VPL.Geom.SET`** &mdash; *Type*.\n\n\n\n```julia\nSET(to, head, up, arm)\n```\n\nNode that sets the position and orientation of a turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL55-L59' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.set!-Tuple{VPL.Geom.MTurtle}' href='#VPL.Geom.set!-Tuple{VPL.Geom.MTurtle}'>#</a>\n**`VPL.Geom.set!`** &mdash; *Method*.\n\n\n\n```julia\nset!(turtle, to, head, up, arm)\n```\n\nSet position and orientation of a turtle.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL46-L50' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.RU' href='#VPL.Geom.RU'>#</a>\n**`VPL.Geom.RU`** &mdash; *Type*.\n\n\n\n```julia\nRU(angle)\n```\n\nNode that rotates a turtle around up axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL84-L89' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ru!-Union{Tuple{FT}, Tuple{Any, FT}} where FT' href='#VPL.Geom.ru!-Union{Tuple{FT}, Tuple{Any, FT}} where FT'>#</a>\n**`VPL.Geom.ru!`** &mdash; *Method*.\n\n\n\n```julia\nru!(turtle, angle)\n```\n\nRotates a turtle around up axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL69-L74' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.RA' href='#VPL.Geom.RA'>#</a>\n**`VPL.Geom.RA`** &mdash; *Type*.\n\n\n\n```julia\nRA(angle)\n```\n\nNode that rotates a turtle around arm axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL111-L116' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ra!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle, FT}} where FT' href='#VPL.Geom.ra!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle, FT}} where FT'>#</a>\n**`VPL.Geom.ra!`** &mdash; *Method*.\n\n\n\n```julia\nra!(turtle, angle)\n```\n\nRotates a turtle around arm axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL96-L101' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.RH' href='#VPL.Geom.RH'>#</a>\n**`VPL.Geom.RH`** &mdash; *Type*.\n\n\n\n```julia\nRH(angle)\n```\n\nNode that rotates a turtle around head axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL138-L143' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.rh!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle, FT}} where FT' href='#VPL.Geom.rh!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle, FT}} where FT'>#</a>\n**`VPL.Geom.rh!`** &mdash; *Method*.\n\n\n\n```julia\nrh!(turtle, angle)\n```\n\nRotate turtle around head axis. Angle must be in hexadecimal degrees and the rotation is clockwise.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL123-L128' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.F' href='#VPL.Geom.F'>#</a>\n**`VPL.Geom.F`** &mdash; *Type*.\n\n\n\n```julia\nF(dist)\n```\n\nMoves a turtle forward a given distance.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL160-L164' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.f!-Tuple{VPL.Geom.MTurtle, Any}' href='#VPL.Geom.f!-Tuple{VPL.Geom.MTurtle, Any}'>#</a>\n**`VPL.Geom.f!`** &mdash; *Method*.\n\n\n\n```julia\nf!(turtle, dist)\n```\n\nMove turtle forward a given distance.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Movements.jl#LL150-L154' class='documenter-source'>source</a><br>\n\n\n<a id='D-vectors'></a>\n\n<a id='D-vectors-1'></a>\n\n## 3D vectors\n\n<a id='VPL.Geom.Vec' href='#VPL.Geom.Vec'>#</a>\n**`VPL.Geom.Vec`** &mdash; *Type*.\n\n\n\n```julia\nVec(x, y, z)\n```\n\n3D vector or point with coordinates x, y and z.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL14-L18' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.O-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT' href='#VPL.Geom.O-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT'>#</a>\n**`VPL.Geom.O`** &mdash; *Method*.\n\n\n\n```julia\nO()\n```\n\nReturns the origin of the 3D coordinate system as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `O(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL23-L28' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.X-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT' href='#VPL.Geom.X-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT'>#</a>\n**`VPL.Geom.X`** &mdash; *Method*.\n\n\n\n```julia\nX()\n```\n\nReturns an unit vector in the direction of the X axis as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `X(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL73-L78' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Y-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT' href='#VPL.Geom.Y-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT'>#</a>\n**`VPL.Geom.Y`** &mdash; *Method*.\n\n\n\n```julia\nY()\n```\n\nReturns an unit vector in the direction of the Y axis as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `Y(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL53-L58' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Z-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT' href='#VPL.Geom.Z-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT'>#</a>\n**`VPL.Geom.Z`** &mdash; *Method*.\n\n\n\n```julia\nZ()\n```\n\nReturns an unit vector in the direction of the Z axis as a `Vec` object. By default, the coordinates will be in double  floating precision (`Float64`) but it is possible to generate a version with lower floating precision as in `Z(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL33-L38' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.X-Tuple{FT} where FT' href='#VPL.Geom.X-Tuple{FT} where FT'>#</a>\n**`VPL.Geom.X`** &mdash; *Method*.\n\n\n\n```julia\nX(s)\n```\n\nReturns scaled vector in the direction of the X axis with length `s` as a `Vec` object using the same floating point precision as `s`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL83-L88' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Y-Tuple{FT} where FT' href='#VPL.Geom.Y-Tuple{FT} where FT'>#</a>\n**`VPL.Geom.Y`** &mdash; *Method*.\n\n\n\n```julia\nY(s)\n```\n\nReturns scaled vector in the direction of the Y axis with length `s` as a `Vec` object using the same floating point precision as `s`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL63-L68' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Z-Tuple{FT} where FT' href='#VPL.Geom.Z-Tuple{FT} where FT'>#</a>\n**`VPL.Geom.Z`** &mdash; *Method*.\n\n\n\n```julia\nZ(s)\n```\n\nReturns scaled vector in the direction of the Z axis with length `s` as a `Vec` object using the same floating point precision as `s`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Module_Geom.jl#LL43-L48' class='documenter-source'>source</a><br>\n\n\n<a id='Geometry-primitives'></a>\n\n<a id='Geometry-primitives-1'></a>\n\n## Geometry primitives\n\n<a id='VPL.Geom.Rectangle-Tuple{StaticArraysCore.SVector{3}, StaticArraysCore.SVector{3}, StaticArraysCore.SVector{3}}' href='#VPL.Geom.Rectangle-Tuple{StaticArraysCore.SVector{3}, StaticArraysCore.SVector{3}, StaticArraysCore.SVector{3}}'>#</a>\n**`VPL.Geom.Rectangle`** &mdash; *Method*.\n\n\n\n```julia\nRectangle(v, l, w)\n```\n\nCreate a rectangle from a vertex (`v`) and vectors `l` and `w` representing the side of the primitive. If `l` and `w` are not orthogonal \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/Rectangle.jl#LL71-L76' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Rectangle-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.Rectangle-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.Rectangle`** &mdash; *Method*.\n\n\n\n```julia\nRectangle(;l = 1.0, w = 1.0)\n```\n\nCreate a standard rectangle with length `l` and width `w` (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/Rectangle.jl#LL50-L54' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Rectangle!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.Rectangle!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Rectangle!`** &mdash; *Method*.\n\n\n\n```julia\nRectangle!(turtle; l = 1.0, w = 1.0, move = false)\n```\n\nGenerate a rectangle with length `l` (along the `head` of the turtle) and width `w` (along the `arm` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite side of the generated rectangle (see VPL documentation for for more details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL20-L26' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Ellipse-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat' href='#VPL.Geom.Ellipse-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Ellipse`** &mdash; *Method*.\n\n\n\n```julia\nEllipse(;l = 1.0, w = 1.0, n = 20)\n```\n\nCreate a standard ellipse with length `l`, width `w` and discretized into `n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/Ellipse.jl#LL61-L65' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Ellipse!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.Ellipse!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Ellipse!`** &mdash; *Method*.\n\n\n\n```julia\nEllipse!(turtle; l = 1.0, w = 1.0, n = 20, move = false)\n```\n\nGenerate an ellipse with length `l` (along the `head` of the turtle) and width `w` (along the `arm` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite side of the generated rectangle (see VPL documentation for for more details). The ellipse will be converted into a mesh with `n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL4-L10' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCylinder-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat' href='#VPL.Geom.HollowCylinder-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.HollowCylinder`** &mdash; *Method*.\n\n\n\n```julia\nHollowCylinder(;l = 1.0, w = 1.0, h = 1.0, n = 20)\n```\n\nCreate a standard hollow cylinder with length `l`, width `w`, height `h` and discretized into `2n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/HollowCylinder.jl#LL112-L116' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCylinder!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.HollowCylinder!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.HollowCylinder!`** &mdash; *Method*.\n\n\n\n```julia\nHollowCylinder!(turtle; l = 1.0, w = 1.0, h = 1.0, n = 20, move = false)\n```\n\nGenerate a hollow cylinder with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated hollow cylinder (see VPL documentation for for more details). The hollow cylinder will be converted into  a mesh with `2n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL69-L76' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCylinder-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCylinder-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCylinder`** &mdash; *Method*.\n\n\n\n```julia\nSolidCylinder(;l = 1.0, w = 1.0, h = 1.0, n = 20)\n```\n\nCreate a standard solid cylinder with length `l`, width `w`, height `h` and discretized into `4n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/SolidCylinder.jl#LL107-L111' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCylinder!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.SolidCylinder!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.SolidCylinder!`** &mdash; *Method*.\n\n\n\n```julia\nSolidCylinder!(turtle; l = 1.0, w = 1.0, h = 1.0, n = 20, move = false)\n```\n\nGenerate a solid cylinder with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated solid cylinder (see VPL documentation for for more details). The solid cylinder will be converted into  a mesh with `4n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL136-L143' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCone-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat' href='#VPL.Geom.HollowCone-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.HollowCone`** &mdash; *Method*.\n\n\n\n```julia\nHollowCone(;l = 1.0, w = 1.0, h = 1.0, n = 20)\n```\n\nCreate a standard hollow cone with length `l`, width `w`, height `h` and discretized into `n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/HollowCone.jl#LL79-L83' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCone!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.HollowCone!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.HollowCone!`** &mdash; *Method*.\n\n\n\n```julia\nHollowCone!(turtle; l = 1.0, w = 1.0, h = 1.0, n = 20, move = false)\n```\n\nGenerate a hollow cone with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated hollow cone (see VPL documentation for for more details). The hollow cone will be converted into a mesh  with `n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL36-L43' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCone-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCone-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCone`** &mdash; *Method*.\n\n\n\n```julia\nSolidCone(;l = 1.0, w = 1.0, h = 1.0, n = 20)\n```\n\nCreate a standard solid cone with length `l`, width `w`, height `h` and discretized into `2n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/SolidCone.jl#LL71-L75' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCone!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.SolidCone!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.SolidCone!`** &mdash; *Method*.\n\n\n\n```julia\nSolidCone!(turtle; l = 1.0, w = 1.0, h = 1.0, n = 20, move = false)\n```\n\nGenerate a solid cone with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated solid cone (see VPL documentation for for more details). The solid cone will be converted into a mesh  with `2n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL103-L110' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCube-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidCube-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidCube`** &mdash; *Method*.\n\n\n\n```julia\nSolidCube(;l = 1.0, w = 1.0, h = 1.0)\n```\n\nCreate a standard solid cube with length `l`, width `w`, height `h` (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/SolidCube.jl#LL63-L67' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidCube!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.SolidCube!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.SolidCube!`** &mdash; *Method*.\n\n\n\n```julia\nSolidCube!(turtle; l = 1.0, w = 1.0, h = 1.0, move = false)\n```\n\nGenerate a solid cube with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated solid cube (see VPL documentation for for more details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL120-L126' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCube-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.HollowCube-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowCube`** &mdash; *Method*.\n\n\n\n```julia\nHollowCube(;l = 1.0, w = 1.0, h = 1.0)\n```\n\nCreate a standard hollow cube with length `l`, width `w`, height `h` (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/HollowCube.jl#LL58-L62' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowCube!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.HollowCube!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.HollowCube!`** &mdash; *Method*.\n\n\n\n```julia\nHollowCube!(turtle; l = 1.0, w = 1.0, h = 1.0, move = false)\n```\n\nGenerate a hollow cube with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated hollow cube (see VPL documentation for for more details).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL53-L59' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidFrustum-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.SolidFrustum-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.SolidFrustum`** &mdash; *Method*.\n\n\n\n```julia\nSolidFrustum(;l = 1.0, w = 1.0, h = 1.0, n = 20)\n```\n\nCreate a standard solid frustum with length `l`, width `w`, height `h` and discretized into `4n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/SolidFrustum.jl#LL111-L115' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.SolidFrustum!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.SolidFrustum!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.SolidFrustum!`** &mdash; *Method*.\n\n\n\n```julia\nSolidFrustum!(turtle; l = 1.0, w = 1.0, h = 1.0, ratio 1.0, n = 20, move = false)\n```\n\nGenerate a solid frustum  of a given `ratio` with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated solid frustum (see VPL documentation for for more details). The solid frustum will be converted into  a mesh with `4n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL153-L160' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowFrustum-Union{Tuple{}, Tuple{FT}} where FT' href='#VPL.Geom.HollowFrustum-Union{Tuple{}, Tuple{FT}} where FT'>#</a>\n**`VPL.Geom.HollowFrustum`** &mdash; *Method*.\n\n\n\n```julia\nHollowFrustum(;l = 1.0, w = 1.0, h = 1.0, n = 20)\n```\n\nCreate a standard hollow frustum with length `l`, width `w`, height `h` and discretized into `2n` triangles (see VPL documentation for details). \n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/HollowFrustum.jl#LL107-L111' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.HollowFrustum!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.HollowFrustum!-Union{Tuple{FT}, Tuple{VPL.Geom.MTurtle{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.HollowFrustum!`** &mdash; *Method*.\n\n\n\n```julia\nHollowFrustum!(turtle; l = 1.0, w = 1.0, h = 1.0, ratio =  1.0, n = 20, move = false)\n```\n\nGenerate a hollow frustum with length `l` (along the `up` direction of the turtle), width `w` (along the `arm` of the turtle) and height `h` (along the `head` of the turtle) in front of the turtle and optionally move the turtle forward to the opposite  side of the generated hollow frustum (see VPL documentation for for more details). The hollow frustum will be converted into  a mesh with `2n` triangles.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Turtle/Primitives.jl#LL86-L93' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.BBox-Union{Tuple{VT}, Tuple{FT}, Tuple{VPL.Geom.Mesh{VT}}} where {FT, VT<:StaticArraysCore.SVector{3, FT}}' href='#VPL.Geom.BBox-Union{Tuple{VT}, Tuple{FT}, Tuple{VPL.Geom.Mesh{VT}}} where {FT, VT<:StaticArraysCore.SVector{3, FT}}'>#</a>\n**`VPL.Geom.BBox`** &mdash; *Method*.\n\n\n\n```julia\nBBox(m::Mesh)\n```\n\nBuild a tight axis-aligned bounding box around a `Mesh` object.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/BBox.jl#LL4-L8' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.BBox-Union{Tuple{FT}, Tuple{StaticArraysCore.SVector{3, FT}, StaticArraysCore.SVector{3, FT}}} where FT' href='#VPL.Geom.BBox-Union{Tuple{FT}, Tuple{StaticArraysCore.SVector{3, FT}, StaticArraysCore.SVector{3, FT}}} where FT'>#</a>\n**`VPL.Geom.BBox`** &mdash; *Method*.\n\n\n\n```julia\nBBox(pmin, pmax)\n```\n\nBuild an axis-aligned bounding box given the vector of minimum (`pmin`) and maximum (`pmax`) coordinates.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Primitives/BBox.jl#LL28-L32' class='documenter-source'>source</a><br>\n\n\n<a id='Mesh-related-methods'></a>\n\n<a id='Mesh-related-methods-1'></a>\n\n## Mesh-related methods\n\n<a id='VPL.Geom.Mesh-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.Mesh-Union{Tuple{}, Tuple{FT}, Tuple{Type{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Mesh`** &mdash; *Method*.\n\n\n\n```julia\nMesh()\n```\n\nGenerate an empty triangular dense mesh that represents a primitive or 3D scene. By default a `Mesh` object will only accept coordinates in double floating precision (`Float64`) but a lower precision can be generated by specifying the corresponding data type as in `Mesh(Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Mesh/Mesh.jl#LL9-L15' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.Mesh-Union{Tuple{FT}, Tuple{Any}, Tuple{Any, Any}, Tuple{Any, Any, Type{FT}}} where FT<:AbstractFloat' href='#VPL.Geom.Mesh-Union{Tuple{FT}, Tuple{Any}, Tuple{Any, Any}, Tuple{Any, Any, Type{FT}}} where FT<:AbstractFloat'>#</a>\n**`VPL.Geom.Mesh`** &mdash; *Method*.\n\n\n\n```julia\nMesh(nt, nv = nt*3)\n```\n\nGenerate a triangular dense mesh with enough memory allocated to store `nt` triangles and `nv` vertices.  The behaviour is equivalent to generating an empty mesh but may be computationally more efficient when  appending a large number of primitives. If a lower floating precision is require this may be specified as the third argument as in `Mesh(10, 30, Float32)`.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Mesh/Mesh.jl#LL20-L27' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.ntriangles-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.ntriangles-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.ntriangles`** &mdash; *Method*.\n\n\n\n```julia\nntriangles(mesh)\n```\n\nExtract the number of triangles from a `Mesh` object.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Mesh/Mesh.jl#LL35-L39' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.nvertices-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.nvertices-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.nvertices`** &mdash; *Method*.\n\n\n\n```julia\nnvertices(mesh)\n```\n\nExtract the number of vertices from a `Mesh` object.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Mesh/Mesh.jl#LL42-L46' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.area-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.area-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.area`** &mdash; *Method*.\n\n\n\n```julia\narea(m::Mesh)\n```\n\nTotal surface area of a mesh (as the sum of areas of individual triangles).\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Mesh/Mesh.jl#LL94-L98' class='documenter-source'>source</a><br>\n\n<a id='VPL.Geom.areas-Tuple{VPL.Geom.Mesh}' href='#VPL.Geom.areas-Tuple{VPL.Geom.Mesh}'>#</a>\n**`VPL.Geom.areas`** &mdash; *Method*.\n\n\n\n```julia\nareas(m::Mesh)\n```\n\nA vector with the areas of the different triangles in a mesh.\n\n\n<a target='_blank' href='https://github.com/AleMorales/VPL.jl/blob/ad86afd063ba4a15975584f1b4744fe3ef405caa/src/Geom/Mesh/Mesh.jl#LL103-L107' class='documenter-source'>source</a><br>\n\n\n```\n\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"Geometry.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.242","theme":{"light":"default","dark":"darkly"}},"extensions":{"book":{"multiFile":true}}}}}