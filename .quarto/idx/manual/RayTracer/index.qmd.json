{"title":"Ray tracing distribution of irradiance","markdown":{"yaml":{"title":"Ray tracing distribution of irradiance","author":"Alejandro Morales Sierra","date":"last-modified","execute":{"cache":true}},"headingText":"Some dev notes","containsRefs":false,"markdown":"\n\n\n\n## General description\n\nMonte Carlo Ray Tracer where rays are tracer from the sources towards the scene that is representd by triangular 3D meshes. The ray tracer has the following features:\n\n1. A Russian roulette is used for scattering such that an unbiased estimate is obtained while using a finite number of scattering events per ray\n\n2. Different acceleration structures may be used (kd-trees, bounday volume hierarchies and no acceleration)\n\n3. Different optical materials may be chosen for each element in the scene (Lambertian, Phong, LambertianPhong, Black body, Sensor) which will stored the absorbed power\nacross the different simulated wavelengths.\n\n4. A SideSwitcher on top of an optical material allows to keep a separate accounting fo rays that hit on either side of a surface (e.g., different sides of a leaf)\n\n5. Different types of sources of irradiance (differing in their geometry of emission) are available, including area, line, point sources, directional sources that \ncover the entire scene and the possibility to turn any 3D mesh into a radiance source.\n\n6. The payload of a ray may include multiple wavelengths and the optical properties may be vary per wavelength. \n\n7. The package Sky is provided to facilitate constructing collections of sources of radiance that approximate the angular distribution of sky radiance, including the\ndifferent CIE standard sky models.\n\n8. The ray tracer can optionally make use of Julia's multithreading capabilities to spread the computation across multiple cores within the same machine.\n\n9. The ray tracer will establish a direct connection to the user's defined objects that contain the optical materials, such that the absorbed power can be accessed easily\nby the user from within graph queries and rules.\n\n10. A grid cloner is provided to minimize border effects with as little overhead as possible.\n\n\n## Source objects\n\nThe source object contains the power of each ray. This is equivalent to the radiance emitted (measured at source or at some distance from it), times the area \nwhere the radiance is measured and divided by the number of rays emitted by the light source that cross that area of measurement. Hence, when we run the ray tracer\nwe should get back the correct irradiance on the measurement area.\n\nIn the case of directional light sources, the user should just use the *Sky* package which performs all necessary calculations for direct and diffuse solar radiation\nand generate the sources themselves.\n\nFor other types of sources, the user should provided the total power emitted by the source, but helper functions will be provided to calculate this value from different types\nof measurements and source geometries.\n\nSources are separate from the scene itself. This allows separating the construction of 3D mesh with optical properties from the different types of sources. The reasoning for this\nis as follows: (i) the 3D mesh may be built incrementally, especially when elements not include in the graphs are needed (typical examples are the soil surface or structural\nelements in the scene), (ii) different sources may be used for different simulations in the same scene (e.g., different times of the day, different solar wavelengths, thermal radiation)\n\n## Grid cloner\n\nThis should be implemented inside the `trace!()` function as that is where the new rays are generated. It should somehow make use of the gbox? Look for a previous implementation of the\ngrid cloner approach.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.242","theme":{"light":"default","dark":"darkly"},"title":"Ray tracing distribution of irradiance","author":"Alejandro Morales Sierra","date":"last-modified"},"extensions":{"book":{"multiFile":true}}}}}