---
title: "Context sensitive rules"
author: 
    - name: "Alejandro Morales Sierra"
      affiliation: "Centre for Crop Systems Analysis - Wageningen University"
date: last-modified
execute: 
    enabled: false
---

# Context sensitive rules

This examples goes back to a very simple situation: a linear sequence of 3 cells. The point of this example is to introduce relational growth rules and context capturing.

A relational rules matches nodes based on properties of neighbouring nodes in the graph. This requires traversing the graph, which can be done with the methods `parent` and `children` on the `Context` object of the current node, which return a list of `Context` objects for the parent or children nodes.

In some cases, it is not only sufficient to query the neighbours of a node but also to use properties of those neighbours in the right hand side component of the rule. This is know as "capturing the context" of the node being updated. This can be done by returning the additional nodes from the `lhs` component (in addition to `true` or `false`) and by accepting these additional nodes in the `rhs` component. In addition, we tell VPL that this rule is capturing the context with `captures = true`.

In the example below, each `Cell` keeps track of a `state` variable (which is either 0 or 1). Only the first cell has a state of 1 at the beginning. In the growth rule, we check the father of each `Cell`. When a `Cell` does not have a parent, the rule does not match, otherwise, we pass capture the parent node. In the right hand side, we replace the cell with a new cell with the state of the parent node that was captured. Note that that now, the rhs component gets a new argument, which corresponds to the context of the father node captured in the lhs.

```{julia}
using VPL
struct Cell <: Node
    state::Int64
end
function transfer(context)
    if hasParent(context)
        return (true, (parent(context), ))
    else
        return (false, ())
    end
end
rule = Rule(Cell, lhs = transfer, rhs = (context, father) -> Cell(data(father).state), captures = true)
axiom = Cell(1) + Cell(0) + Cell(0)
pop = Graph(axiom = axiom, rules = rule)
```

**Rewrite with queries to access the values**

In the original state defined by the axiom, only the first node contains a state of 1. We can retrieve the state of each node with a query. A `Query` object is a like a `Rule` but without a right-hand side (i.e., its purpose is to return the nodes that match a particular condition). In this case, we just want to return all the `Cell` nodes.

```{julia}
getCell
[n.data.state for n in values(VPL.Core.nodes(graph(pop)))]
```

If we rewrite the graph one we will see that the second cell now has a state of 1

```{julia}
rewrite!(pop)
[n.data.state for n in values(VPL.Core.nodes(graph(pop)))]
```

And a second iteration results in all cells have a state of 1

```{julia}
rewrite!(pop)
[n.data.state for n in values(VPL.Core.nodes(graph(pop)))]
```