{
  "hash": "f5aa474937a6a6c9abd3aaf8cfafac4b",
  "result": {
    "markdown": "---\ntitle: \"Geometry primitives\"\nauthor: \n    - name: \"Alejandro Morales Sierra\"\n      affiliation: \"Centre for Crop Systems Analysis - Wageningen University\"\ndate: last-modified\n---\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing VPL\n```\n:::\n\n\nVPL offers several functions to created 3D meshes that correspond to common \ngeometric shapes (i.e., primitives). They are meant to represent simple geometry\nelements or to build more complex geometries through the use of turtle-based\nprocedural geometry. For that reason, there are two versions of each primitive\nconstructor: one that constructs the mesh directly (with a standard location\nand orientation) and one that *feeds* the mesh to a turtle. The former is meant\nto be used when manually adding geometries to am existing scene (e.g., soil, \nstructural elements) whereas the latter is mean to be used within the `feed`\nmethods associated to nodes in a graph. Additional functions are able to \ntranslate and rotate these meshes to the desired location and orientation (see\nAPI of the Geometry module for details).\n\nBelow, the functions for direct construction of the meshes are listed. The\nturtle-based constructor have the same argument plus the turtle arugment itself \nas well as optional arguments for color and optical materias (see API of the \nGeometry module for more details).\n\nEach primitive is visualized using the `render` function form VPL. These 3D \nvisualizations keep the axes to help understand what the standard location\nand orientation are (use `axes = false` to turn off). They also set `normals = true` \nand `wireframe = true` to highlight how the mesh is partitioned into triangles \nand the normal vectors of each triangle (this is important for the ray tracer and \nwhen exporting meshes out of VPL). All meshes are rendered in green assuming 50%\ntransparency (`color = RGBA(0,1,0,0.5)`). Note that one must use `transparency = true` \nto ensure that the transparency is enabled when rendering the mesh.\n\n## Triangle\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\np = Triangle(length = 1.0, width = 1.0)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](index_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n## Rectangle\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\np = Rectangle(length = 1.0, width = 1.0)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](index_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n## Trapezoid\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\np = Trapezoid(length = 1.0, width = 1.0, ratio = 0.5)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](index_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n## Ellipse\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\np = Ellipse(length = 1.0, width = 1.0, n = 30)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n## Axis-aligned bounding box\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\np = BBox(Vec(0.0, 0.0, 0.0), Vec(1.0, 1.0, 1.0))\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](index_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n## Cube\n\nSolid version\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\np = SolidCube(length = 1.0, width = 1.0, height = 1.0)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\nHollow version\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\np = HollowCube(length = 1.0, width = 1.0, height = 1.0)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](index_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n## Cylinder\n\nSolid version\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\np = SolidCylinder(length = 1.0, width = 1.0, height = 1.0, n = 80)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](index_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\nHollow version\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\np = HollowCylinder(length = 1.0, width = 1.0, height = 1.0, n = 40)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n## Frustum\n\nSolid version\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\np = SolidFrustum(length = 1.0, width = 1.0, height = 1.0, ratio = 0.5, n = 80)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](index_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\nHollow version\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\np = HollowFrustum(length = 1.0, width = 1.0, height = 1.0, ratio = 0.5, n = 40)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](index_files/figure-html/cell-13-output-1.png){}\n:::\n:::\n\n\n## Cone\n\nSolid version\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\np = SolidCone(length = 1.0, width = 1.0, height = 1.0, n = 40)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](index_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\nHollow version\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\np = HollowCone(length = 1.0, width = 1.0, height = 1.0, n = 20)\nrender(p, wireframe = true, normals = true, color = RGBA(0,1,0,0.5), transparency = true)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](index_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}